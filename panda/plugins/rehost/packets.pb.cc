// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packets.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "packets.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace autoemu {

namespace {

const ::google::protobuf::Descriptor* SymbolTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SymbolTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* SymbolTable_Symbol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SymbolTable_Symbol_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemoryAccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemoryAccess_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MemoryAccess_AccessType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OldMemoryAccesses_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OldMemoryAccesses_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubCalls_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubCalls_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PacketType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_packets_2eproto() {
  protobuf_AddDesc_packets_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "packets.proto");
  GOOGLE_CHECK(file != NULL);
  SymbolTable_descriptor_ = file->message_type(0);
  static const int SymbolTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolTable, symbols_),
  };
  SymbolTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SymbolTable_descriptor_,
      SymbolTable::default_instance_,
      SymbolTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SymbolTable));
  SymbolTable_Symbol_descriptor_ = SymbolTable_descriptor_->nested_type(0);
  static const int SymbolTable_Symbol_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolTable_Symbol, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolTable_Symbol, name_),
  };
  SymbolTable_Symbol_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SymbolTable_Symbol_descriptor_,
      SymbolTable_Symbol::default_instance_,
      SymbolTable_Symbol_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolTable_Symbol, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolTable_Symbol, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SymbolTable_Symbol));
  MemoryAccess_descriptor_ = file->message_type(1);
  static const int MemoryAccess_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryAccess, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryAccess, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryAccess, value_),
  };
  MemoryAccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemoryAccess_descriptor_,
      MemoryAccess::default_instance_,
      MemoryAccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryAccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryAccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemoryAccess));
  MemoryAccess_AccessType_descriptor_ = MemoryAccess_descriptor_->enum_type(0);
  OldMemoryAccesses_descriptor_ = file->message_type(2);
  static const int OldMemoryAccesses_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OldMemoryAccesses, accesses_),
  };
  OldMemoryAccesses_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OldMemoryAccesses_descriptor_,
      OldMemoryAccesses::default_instance_,
      OldMemoryAccesses_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OldMemoryAccesses, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OldMemoryAccesses, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OldMemoryAccesses));
  SubCalls_descriptor_ = file->message_type(3);
  static const int SubCalls_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubCalls, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubCalls, called_),
  };
  SubCalls_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubCalls_descriptor_,
      SubCalls::default_instance_,
      SubCalls_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubCalls, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubCalls, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubCalls));
  PacketType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_packets_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SymbolTable_descriptor_, &SymbolTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SymbolTable_Symbol_descriptor_, &SymbolTable_Symbol::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemoryAccess_descriptor_, &MemoryAccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OldMemoryAccesses_descriptor_, &OldMemoryAccesses::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubCalls_descriptor_, &SubCalls::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_packets_2eproto() {
  delete SymbolTable::default_instance_;
  delete SymbolTable_reflection_;
  delete SymbolTable_Symbol::default_instance_;
  delete SymbolTable_Symbol_reflection_;
  delete MemoryAccess::default_instance_;
  delete MemoryAccess_reflection_;
  delete OldMemoryAccesses::default_instance_;
  delete OldMemoryAccesses_reflection_;
  delete SubCalls::default_instance_;
  delete SubCalls_reflection_;
}

void protobuf_AddDesc_packets_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rpackets.proto\022\007autoemu\"d\n\013SymbolTable\022"
    ",\n\007symbols\030\001 \003(\0132\033.autoemu.SymbolTable.S"
    "ymbol\032\'\n\006Symbol\022\017\n\007address\030\001 \002(\004\022\014\n\004name"
    "\030\002 \002(\t\"\201\001\n\014MemoryAccess\022\017\n\007address\030\001 \002(\004"
    "\022.\n\004type\030\002 \002(\0162 .autoemu.MemoryAccess.Ac"
    "cessType\022\r\n\005value\030\003 \001(\004\"!\n\nAccessType\022\010\n"
    "\004READ\020\000\022\t\n\005WRITE\020\001\"<\n\021OldMemoryAccesses\022"
    "\'\n\010accesses\030\001 \003(\0132\025.autoemu.MemoryAccess"
    "\">\n\010SubCalls\022\017\n\007address\030\001 \002(\004\022!\n\006called\030"
    "\002 \003(\0132\021.autoemu.SubCalls*Y\n\nPacketType\022\013"
    "\n\007SYMBOLS\020\000\022\027\n\023OLD_MEMORY_ACCESSES\020\001\022\025\n\021"
    "NEW_MEMORY_ACCESS\020\002\022\016\n\nCALL_TRACE\020\003", 475);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "packets.proto", &protobuf_RegisterTypes);
  SymbolTable::default_instance_ = new SymbolTable();
  SymbolTable_Symbol::default_instance_ = new SymbolTable_Symbol();
  MemoryAccess::default_instance_ = new MemoryAccess();
  OldMemoryAccesses::default_instance_ = new OldMemoryAccesses();
  SubCalls::default_instance_ = new SubCalls();
  SymbolTable::default_instance_->InitAsDefaultInstance();
  SymbolTable_Symbol::default_instance_->InitAsDefaultInstance();
  MemoryAccess::default_instance_->InitAsDefaultInstance();
  OldMemoryAccesses::default_instance_->InitAsDefaultInstance();
  SubCalls::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_packets_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_packets_2eproto {
  StaticDescriptorInitializer_packets_2eproto() {
    protobuf_AddDesc_packets_2eproto();
  }
} static_descriptor_initializer_packets_2eproto_;
const ::google::protobuf::EnumDescriptor* PacketType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PacketType_descriptor_;
}
bool PacketType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SymbolTable_Symbol::kAddressFieldNumber;
const int SymbolTable_Symbol::kNameFieldNumber;
#endif  // !_MSC_VER

SymbolTable_Symbol::SymbolTable_Symbol()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autoemu.SymbolTable.Symbol)
}

void SymbolTable_Symbol::InitAsDefaultInstance() {
}

SymbolTable_Symbol::SymbolTable_Symbol(const SymbolTable_Symbol& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:autoemu.SymbolTable.Symbol)
}

void SymbolTable_Symbol::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  address_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SymbolTable_Symbol::~SymbolTable_Symbol() {
  // @@protoc_insertion_point(destructor:autoemu.SymbolTable.Symbol)
  SharedDtor();
}

void SymbolTable_Symbol::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SymbolTable_Symbol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolTable_Symbol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SymbolTable_Symbol_descriptor_;
}

const SymbolTable_Symbol& SymbolTable_Symbol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packets_2eproto();
  return *default_instance_;
}

SymbolTable_Symbol* SymbolTable_Symbol::default_instance_ = NULL;

SymbolTable_Symbol* SymbolTable_Symbol::New() const {
  return new SymbolTable_Symbol;
}

void SymbolTable_Symbol::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    address_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SymbolTable_Symbol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autoemu.SymbolTable.Symbol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 address = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &address_)));
          set_has_address();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autoemu.SymbolTable.Symbol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autoemu.SymbolTable.Symbol)
  return false;
#undef DO_
}

void SymbolTable_Symbol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autoemu.SymbolTable.Symbol)
  // required uint64 address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->address(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autoemu.SymbolTable.Symbol)
}

::google::protobuf::uint8* SymbolTable_Symbol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoemu.SymbolTable.Symbol)
  // required uint64 address = 1;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->address(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoemu.SymbolTable.Symbol)
  return target;
}

int SymbolTable_Symbol::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->address());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolTable_Symbol::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SymbolTable_Symbol* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SymbolTable_Symbol*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SymbolTable_Symbol::MergeFrom(const SymbolTable_Symbol& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SymbolTable_Symbol::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolTable_Symbol::CopyFrom(const SymbolTable_Symbol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolTable_Symbol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SymbolTable_Symbol::Swap(SymbolTable_Symbol* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SymbolTable_Symbol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SymbolTable_Symbol_descriptor_;
  metadata.reflection = SymbolTable_Symbol_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SymbolTable::kSymbolsFieldNumber;
#endif  // !_MSC_VER

SymbolTable::SymbolTable()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autoemu.SymbolTable)
}

void SymbolTable::InitAsDefaultInstance() {
}

SymbolTable::SymbolTable(const SymbolTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:autoemu.SymbolTable)
}

void SymbolTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SymbolTable::~SymbolTable() {
  // @@protoc_insertion_point(destructor:autoemu.SymbolTable)
  SharedDtor();
}

void SymbolTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SymbolTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SymbolTable_descriptor_;
}

const SymbolTable& SymbolTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packets_2eproto();
  return *default_instance_;
}

SymbolTable* SymbolTable::default_instance_ = NULL;

SymbolTable* SymbolTable::New() const {
  return new SymbolTable;
}

void SymbolTable::Clear() {
  symbols_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SymbolTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autoemu.SymbolTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .autoemu.SymbolTable.Symbol symbols = 1;
      case 1: {
        if (tag == 10) {
         parse_symbols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_symbols()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_symbols;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autoemu.SymbolTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autoemu.SymbolTable)
  return false;
#undef DO_
}

void SymbolTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autoemu.SymbolTable)
  // repeated .autoemu.SymbolTable.Symbol symbols = 1;
  for (int i = 0; i < this->symbols_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->symbols(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autoemu.SymbolTable)
}

::google::protobuf::uint8* SymbolTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoemu.SymbolTable)
  // repeated .autoemu.SymbolTable.Symbol symbols = 1;
  for (int i = 0; i < this->symbols_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->symbols(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoemu.SymbolTable)
  return target;
}

int SymbolTable::ByteSize() const {
  int total_size = 0;

  // repeated .autoemu.SymbolTable.Symbol symbols = 1;
  total_size += 1 * this->symbols_size();
  for (int i = 0; i < this->symbols_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->symbols(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SymbolTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SymbolTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SymbolTable::MergeFrom(const SymbolTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  symbols_.MergeFrom(from.symbols_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SymbolTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolTable::CopyFrom(const SymbolTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolTable::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->symbols())) return false;
  return true;
}

void SymbolTable::Swap(SymbolTable* other) {
  if (other != this) {
    symbols_.Swap(&other->symbols_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SymbolTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SymbolTable_descriptor_;
  metadata.reflection = SymbolTable_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MemoryAccess_AccessType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemoryAccess_AccessType_descriptor_;
}
bool MemoryAccess_AccessType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MemoryAccess_AccessType MemoryAccess::READ;
const MemoryAccess_AccessType MemoryAccess::WRITE;
const MemoryAccess_AccessType MemoryAccess::AccessType_MIN;
const MemoryAccess_AccessType MemoryAccess::AccessType_MAX;
const int MemoryAccess::AccessType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MemoryAccess::kAddressFieldNumber;
const int MemoryAccess::kTypeFieldNumber;
const int MemoryAccess::kValueFieldNumber;
#endif  // !_MSC_VER

MemoryAccess::MemoryAccess()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autoemu.MemoryAccess)
}

void MemoryAccess::InitAsDefaultInstance() {
}

MemoryAccess::MemoryAccess(const MemoryAccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:autoemu.MemoryAccess)
}

void MemoryAccess::SharedCtor() {
  _cached_size_ = 0;
  address_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemoryAccess::~MemoryAccess() {
  // @@protoc_insertion_point(destructor:autoemu.MemoryAccess)
  SharedDtor();
}

void MemoryAccess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MemoryAccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemoryAccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemoryAccess_descriptor_;
}

const MemoryAccess& MemoryAccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packets_2eproto();
  return *default_instance_;
}

MemoryAccess* MemoryAccess::default_instance_ = NULL;

MemoryAccess* MemoryAccess::New() const {
  return new MemoryAccess;
}

void MemoryAccess::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MemoryAccess*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(address_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemoryAccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autoemu.MemoryAccess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 address = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &address_)));
          set_has_address();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .autoemu.MemoryAccess.AccessType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::autoemu::MemoryAccess_AccessType_IsValid(value)) {
            set_type(static_cast< ::autoemu::MemoryAccess_AccessType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional uint64 value = 3;
      case 3: {
        if (tag == 24) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autoemu.MemoryAccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autoemu.MemoryAccess)
  return false;
#undef DO_
}

void MemoryAccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autoemu.MemoryAccess)
  // required uint64 address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->address(), output);
  }

  // required .autoemu.MemoryAccess.AccessType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint64 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autoemu.MemoryAccess)
}

::google::protobuf::uint8* MemoryAccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoemu.MemoryAccess)
  // required uint64 address = 1;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->address(), target);
  }

  // required .autoemu.MemoryAccess.AccessType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional uint64 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoemu.MemoryAccess)
  return target;
}

int MemoryAccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->address());
    }

    // required .autoemu.MemoryAccess.AccessType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryAccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemoryAccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemoryAccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemoryAccess::MergeFrom(const MemoryAccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemoryAccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryAccess::CopyFrom(const MemoryAccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryAccess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MemoryAccess::Swap(MemoryAccess* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemoryAccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemoryAccess_descriptor_;
  metadata.reflection = MemoryAccess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OldMemoryAccesses::kAccessesFieldNumber;
#endif  // !_MSC_VER

OldMemoryAccesses::OldMemoryAccesses()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autoemu.OldMemoryAccesses)
}

void OldMemoryAccesses::InitAsDefaultInstance() {
}

OldMemoryAccesses::OldMemoryAccesses(const OldMemoryAccesses& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:autoemu.OldMemoryAccesses)
}

void OldMemoryAccesses::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OldMemoryAccesses::~OldMemoryAccesses() {
  // @@protoc_insertion_point(destructor:autoemu.OldMemoryAccesses)
  SharedDtor();
}

void OldMemoryAccesses::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OldMemoryAccesses::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OldMemoryAccesses::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OldMemoryAccesses_descriptor_;
}

const OldMemoryAccesses& OldMemoryAccesses::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packets_2eproto();
  return *default_instance_;
}

OldMemoryAccesses* OldMemoryAccesses::default_instance_ = NULL;

OldMemoryAccesses* OldMemoryAccesses::New() const {
  return new OldMemoryAccesses;
}

void OldMemoryAccesses::Clear() {
  accesses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OldMemoryAccesses::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autoemu.OldMemoryAccesses)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .autoemu.MemoryAccess accesses = 1;
      case 1: {
        if (tag == 10) {
         parse_accesses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accesses()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_accesses;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autoemu.OldMemoryAccesses)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autoemu.OldMemoryAccesses)
  return false;
#undef DO_
}

void OldMemoryAccesses::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autoemu.OldMemoryAccesses)
  // repeated .autoemu.MemoryAccess accesses = 1;
  for (int i = 0; i < this->accesses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->accesses(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autoemu.OldMemoryAccesses)
}

::google::protobuf::uint8* OldMemoryAccesses::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoemu.OldMemoryAccesses)
  // repeated .autoemu.MemoryAccess accesses = 1;
  for (int i = 0; i < this->accesses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->accesses(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoemu.OldMemoryAccesses)
  return target;
}

int OldMemoryAccesses::ByteSize() const {
  int total_size = 0;

  // repeated .autoemu.MemoryAccess accesses = 1;
  total_size += 1 * this->accesses_size();
  for (int i = 0; i < this->accesses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accesses(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OldMemoryAccesses::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OldMemoryAccesses* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OldMemoryAccesses*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OldMemoryAccesses::MergeFrom(const OldMemoryAccesses& from) {
  GOOGLE_CHECK_NE(&from, this);
  accesses_.MergeFrom(from.accesses_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OldMemoryAccesses::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OldMemoryAccesses::CopyFrom(const OldMemoryAccesses& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OldMemoryAccesses::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->accesses())) return false;
  return true;
}

void OldMemoryAccesses::Swap(OldMemoryAccesses* other) {
  if (other != this) {
    accesses_.Swap(&other->accesses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OldMemoryAccesses::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OldMemoryAccesses_descriptor_;
  metadata.reflection = OldMemoryAccesses_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubCalls::kAddressFieldNumber;
const int SubCalls::kCalledFieldNumber;
#endif  // !_MSC_VER

SubCalls::SubCalls()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autoemu.SubCalls)
}

void SubCalls::InitAsDefaultInstance() {
}

SubCalls::SubCalls(const SubCalls& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:autoemu.SubCalls)
}

void SubCalls::SharedCtor() {
  _cached_size_ = 0;
  address_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubCalls::~SubCalls() {
  // @@protoc_insertion_point(destructor:autoemu.SubCalls)
  SharedDtor();
}

void SubCalls::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubCalls::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubCalls::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubCalls_descriptor_;
}

const SubCalls& SubCalls::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packets_2eproto();
  return *default_instance_;
}

SubCalls* SubCalls::default_instance_ = NULL;

SubCalls* SubCalls::New() const {
  return new SubCalls;
}

void SubCalls::Clear() {
  address_ = GOOGLE_ULONGLONG(0);
  called_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubCalls::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autoemu.SubCalls)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 address = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &address_)));
          set_has_address();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_called;
        break;
      }

      // repeated .autoemu.SubCalls called = 2;
      case 2: {
        if (tag == 18) {
         parse_called:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_called()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_called;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autoemu.SubCalls)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autoemu.SubCalls)
  return false;
#undef DO_
}

void SubCalls::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autoemu.SubCalls)
  // required uint64 address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->address(), output);
  }

  // repeated .autoemu.SubCalls called = 2;
  for (int i = 0; i < this->called_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->called(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autoemu.SubCalls)
}

::google::protobuf::uint8* SubCalls::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoemu.SubCalls)
  // required uint64 address = 1;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->address(), target);
  }

  // repeated .autoemu.SubCalls called = 2;
  for (int i = 0; i < this->called_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->called(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoemu.SubCalls)
  return target;
}

int SubCalls::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->address());
    }

  }
  // repeated .autoemu.SubCalls called = 2;
  total_size += 1 * this->called_size();
  for (int i = 0; i < this->called_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->called(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubCalls::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubCalls* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubCalls*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubCalls::MergeFrom(const SubCalls& from) {
  GOOGLE_CHECK_NE(&from, this);
  called_.MergeFrom(from.called_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_address()) {
      set_address(from.address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubCalls::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubCalls::CopyFrom(const SubCalls& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubCalls::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->called())) return false;
  return true;
}

void SubCalls::Swap(SubCalls* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    called_.Swap(&other->called_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubCalls::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubCalls_descriptor_;
  metadata.reflection = SubCalls_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace autoemu

// @@protoc_insertion_point(global_scope)
